{"license":"","file_hash":null,"name":"Rhythm","version":"2016.2.1","description":"A set of 80+ useful nodes to give your Revit project Rhythm with Dynamo. Developed by author of sixtysecondrevit.blogspot.com in collaboration with DPSDesign. For updates visit sixtysecondrevit.blogspot.com and for more about DPS visit dpsdesign.org\r\n\r\n *Although these nodes are tested thoroughly we are not responsible for any adverse affects they may have on your file. Make sure you save before running anyone's nodes or graphs.","group":"Breaking CAD","keywords":["text","override","list","remove","documentation","workset","select"],"dependencies":[],"contents":"All Framing at Reference Level - Collects all of the structural framing at a specific reference level, All Upper - This converts the ase of selected items to UPPER. Inputs require booleans to enable for category., Arrowhead Assigner - This node assings the arrowhead type for all text and keynote tags. There is an input for ones you want to exclude., Ayuda.IsArchi-LabInstalled - This node determines if Archi-Lab is installed. Useful with a toggle., Ayuda.IsClockworkInstalled - This node determines if clockwork is installed. Useful with a toggle., Ayuda.IsSteamNodesInstalled - This node determines if steamnodes is installed. Useful with a toggle.;, Ayuda.ThisOrThat - This node is a toggle between two inputs., Collector.DuctsBySystem - This collects all ducts in the project and organizes them by System Classification, Collector.KeynoteTags - This collects all of the keynote tags in the model. Similar to other nodes, but this doesn't use python., Collector.LabelTypes - This node collects all of the label types for the active family document., Collector.PipesBySystem - This collects all pipes in the project and organizes them by System Classification, Collector.Viewports - This collects all of the viewports in the model and outputs the name, title on sheet, scale and viewport type., Dash Remover - This node removes the dash at index 2 if it exists. The reason being, NCS states that no dash shall be used., Element.AreaWithTotal - This will get the area of an element if the parameter exists. Will total as well if needed., Element.Category - This node will get the input element(s)' categories, Element.GetLevelNameAsString - This retrieves the level name of the input elements as a string. This is in response to a known issue with the get value node., Element.GetMultipleParameterValuesByName - Get the value of multiple parameters from elements. (Seperate parameters with comma), Element.GetParameterValueByName(CaSe iNSeNSiTive) - Get the value of one of the element's parameters. (CaSe iNSeNSiTiVe), Element.OverrideCutColorInView - Overrides the elements cut color in the view., Element.OverrideCutLineweight - Overrides the cut lines of the elements, Element.OverrideProjectionLineColor - This node overrides the projection line color with the input color value. Useful for annotation., Element.OverrideProjectionLineweight - Overrides the line thickness of projection lines, Element.ParentFamily - This node retrieces the parent family name for each input element., Element.Room - This node takes the input of all elements of category and reports back the associated room per element. Currently tested with casework, furniture and plumbing fixtures., Element.SetMultipleParametersByName - Set multiple (comma seperated) parameters by name., Element.SetParameterByName(CaSe iNSeNSiTiVe) - Set one of the element's parameters. (CaSe iNSeNSiTiVe), Element.SetPinnedStatus - Will set the element to either pinned or not pinned. True is pinned, false is unpinned. For multiple elements use List.Map, Element.Space - This will retrieve the space in which an element is contained. (if available), Element.Type - This retrieves the element type of the given elements. (if available) Similar to others available but no python here., Geometry.SpaceEvenlyWithBuffer - This will take input geometry and space it out in the Y direction with a buffer between, Get All Tag Types - This node collects the tag types in the model., GetParameterValueByName(TypeOrInstance) - Gets a parameter value by name regardless of type or instance., GetParameterValueByNameAsString - Returns paramter value as string. Same effect as lunchbox node, without python., Group.UngroupElements - This will ungroup the input groups and output their elements. Use with care!, Inspiration.BuffettNode - This is a result of \"what if?\" thinking. The output is a random Warren Buffett quote from brainyquotes.com, Inspiration.CarreyNode - This is a result of \"what if?\" thinking. The output is a random Jim Carrey quote from brainyquotes.com, Inspiration.CashNode - This is a result of \"what if?\" thinking. The output is a random Johnny Cash quote from brainyquotes.com, Inspiration.MarleyNode - This is a result of \"what if?\" thinking. The output is a random Bob Marley quote from brainyquotes.com, Inspiration.SearchQuoteNode - This is a result of \"what if?\" thinking. The output is a random quote based on the search criteria from brainyquotes.com. (As long as it is on the site), Inspiration.TeresaNode - This is a result of \"what if?\" thinking. The output is a random Mother Teresa quote from brainyquotes.com, Level Element Collector - This collects data for all of the Level elements in the model. Similar to the node on Lunchbox, but this one uses all O.O.B. nodes., List.AllIndicesOf - Given an item, returns the zero-based indices of all its occurrences in the list. If the item cannot be found, an empty list is returned. , List.ArchitecturalAlphabeticalSequence - This creates a list of characters. What's different is we typically exclude I's and O's from our characters so there is a toggle for this., List.Contains - Determines if the given list contains the item or items., List.GetItemIndices - This node searches the input list for the given string or number., List.MergeSublists - This will merge all sublists with or without a character between the strings., List.ReturnItemsPreviousToIndex - This will take an index (or indices) and return the items previous to it. Useful for sums of all items previous., Mullion.SortByDirection - This will sort mullions of a host curtain wall by direction they are facing., OS.CurrentUser - This node retrieves the current user logged in., OS.CurrentUserAppData - This retrieves the current user's appdata location, Output.Clean - This will return a single value or list from one input., Parametric Graphic Scale - This node automates the graphic scale assigned per viewport. The input required is all instances of viewport category. It also requires shared parameters. Visit sixtysecondrevit.blogspot.com for details., RemoveListFromList - This node essentially \"subtracts\" the contents of List B from List A to produce a new list with the unique items., Rhythm.3DRoomTags - This node will generate 3D room tags for all rooms in the model. (RFA in extra folder in Dynamo download), Rhythm.BackupRFADeleter - This node will scan the contents of a driectory and delete backup RFA files that appear with a four digit backup number before the file extension. (eg. Family1.0001.rfa) This is deleting files so please use with caution!, Rhythm.Detail Number by View Name  - Automatically numbers your detail number based on the first two characters of your view name. i.e. A4/... (Requires slash to be present), Rhythm.OverrideInteriorCrop - This node will override the lineweight of the crop region on interior elevations. This node would not be possible without the power of the Dynamo community. Specifically Danny Jones with Clark Patterson Lee, Rhythm.PercentGlazingByOrientation - This node was show at RTCNA2015 to optimize your workflows. It reports the window to wall % by direction the wall faces., Rhythm.RenumberGridsByCurve - This node will renumber grids in order of curve drawn through them. Select either letters or numbers. (Alphanumeric coming soon), Rhythm.RenumberRoomsByCurve - This node will renumber rooms along a curve path. This was developed through the guidance of WIlliam Wong at case. Considering WeWork bought Case I wanted this node to live somewhere., Rhythm.Toggle - Toggle that offers two outputs. Created for Dynamo 0.8.1 because of changes to the \"IF\" node, Room Element Collector - THis will collect data regarding rooms in the active model. Similar to Lunchbox node, but this one does not use python., Select Elements By Curve - This will select model elements in order that a curve is drawn through them., SetParameterByName(TypeOrInstance) - Set one of the element's parameters regardless of parameter type or instance., SquareFeetDropper - This node drops square feet from the pulled area, String.CharacterAtIndex - Get's the character at a given index, String.FlipReverse - This node flips the string and reverses it. (April Fools '15) Works for 0.8.0 only, added unicode support, String.IndicesOfCharacter - This node gets all the indices of a given character, String.RemoveAfterGivenCharacter - This will move all characters at and after the given character., String.RemovePriorToCharacter - This will remove all characters prior to the input character. Accepts strings., String.SpecifyDecimalPlaces - This node will take your inout string and number of decimal places to create a new simplified output., TextElement.ToLower - This node converts a Revit text elemnt to upper directly., TextElement.ToTitle - This node converts a Revit text elemnt to upper directly., TextElement.ToUpper - This node converts a Revit text elemnt to upper directly., Unicode.LRE - Start of left-to-right embedding Unicode Character, Unicode.LRM - Left-to-right mark unicode character, Unicode.RLE - Start of right-to-left embedding Unicode Character, Unicode.RLM - Right-to-left mark Unicode character, Unicode.ZWJ - Zero width joiner Unicode Character, Unicode.ZWNJ - Zero width non-joiner Unicode Character, Viewport.ViewName - This node gets the view name of viewports. There is an issue when \"title on sheet\" is used, so this fixes that., Wall.NorthSouthEastWest - This node determines which direction a wall is facing and groups them by the direction or direction they are closest to., Workset.Create - Creates a workset or worksets from input names.","engine_version":"0.9.1.3067","engine":"dynamo","engine_metadata":"","site_url":"sixtysecondrevit.blogspot.com","repository_url":"","contains_binaries":true,"node_libraries":[]}